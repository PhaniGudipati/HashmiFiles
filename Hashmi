Full Stack 
===================
Front end  client + Backend server with db
html css js ts  + core java,servlets,jsp,springboot and restfulwebservice

Language
==========
commuication between humans

Programming Language
==================
between machines
Pop                                      Oop
B,BCPL,COBOL,C                           c++,java,python,.net,etc
1)Performance issues                    1)Performance=inheritance,polymorphism
2)Security                              2)Security=Abstraction,Encapsulation

Java
1)Platform Independent=windows,mac=wora write once run anywhere
2)Garbage Collection=

java 
=============
James Ghosling in 1995 at sunmicrosystems oracle corp

Oak jdk 1.0

java 17=2024 

java 8 =2030

Desktop app
vlc 

Distributed app
gmail ,whatsup

 jee=desktop+distributed
 jse=desktop apps
 jme=andriod apps
 
 Jdk ==Java development kit
 jre =it will provide runtime environment
 Jvm(java virtual machine)
 
 jdk 8
 
 .java 
 
 Compilation
 
 user defined into machine understandable
 .java=.class 
 user understandable lang=machine understandable lang
 source code = byte code
 
 javac filename.java 
 
 java filename
 
 Core Java 
 ==============
 53 keywords
 51 ,goto ,const
 
 all the keywords are in lower case
 class must be started with Uppercase
 
 class AgeOfTwo,(Ageoftwo)
 
 Identifier
 ============
  a name in java
  a-z
  A-Z
  0-9
  $,_
  
  123Hello       invalid
  Hello World     Invalid
  $_$_$_            valid
  
  Variable
  =============
  name of the memory location
  
  1+2
  
  syntax:
  datatype varname=value;
  int hashmi=123;
  
  Datatypes
  primitive              non premitive=string ,arrays
 8 Dt

byte=1byte 0-256
 short int long=integers
float double=floating numbers
char boolean 
10 keywords

Decision Making Statements
if 
if else
if else if
nested
switch,break,continue,default

Operators
============
unary operators
int a=20;
a++
post incr=a++ 20,21
pre =++a 22,22
arithmetic 
+,-,/,*,%
shift(n*2^a)
<<
10<<2 10*2^2=40
10<<3  



 >> (n/2^a)
 10>>2 =2
20>>2 
 
 
 
 
relational
>,<,=>=,<=
bitwise
a=10,b=20,c=30;
if(c>b & c>a)

logical


ternary
int a=10,b=20

(a>b)?a:b;
assignment
a=10;
a+=20//a=a+20=30
a-=10//20

Flow control statements

  *       1        A
  **      23      BC
  
  Packages in java
  A folder in java
  predefined ,userdefined
java.lang
javac -d . HelloWorld.java compilation
java com.b1.has.java.HelloWorld


Eclipse download


Variables

Local:we can use them within the method

  and Global with in the class but outside the method
  
  Instance variables and Static Variable
  
  1)Syntax
  if it is static variable you can specify static keyword
  
  2)Memory
  
  if it is static variable it will allocated memory only once at the time of class loading into jvm
  
  if it is instance variable it will allocated memory for every object creation
  
  class logical existence and object physical existence and instance of class 
  
  types of cars
  
  ObjectName obj=new ObjectName();
  
  3)Access
  objname
  
  static 
  dirctly/class/obj

4)common propety  static 
unique instance

Method
=================
Method is a block of statements

public/private/protected/default void     
accessmodifier variablename returntype methodname(list of args){


body


}

JVM architecture

CLSS

Bootstrap loader rt jar

app class loader

MEMORY AREA

EXECUTION ENGINE

 
local    when , how ,where stack


instance when , how ,where  heap 


static   when,  how ,where memory arae


OOPS
===============
Class 

Object

Pillars of oops
1)Inheritance
2)Abstraction
3)Polymorphism
4)Encapsulation

Inheritance
=================
Acquiring the properties from parent class,super class to child class,sub class
Code Reusability

package org.com.oops;

class A{
	int a=100;
	public void addition() {
		int  a=10;
		int b=20;
		System.out.println(a+b);
	}
	
}
class D extends A{
	int x=300;
	public void div(int a, int b) {
		System.out.println(a/b);
		
	}
	
}
class B extends D{
	int d=2000;
	public static int mul() {
		int a=100;
		int b=2;
		return a*b;
	}
}

public class InheritanceEx extends B{
	int c=300;
	public void sub(int a,int b) {
		System.out.println(a-b);
	}

	public static void main(String[] args) {
	InheritanceEx in=new InheritanceEx();
	System.out.println(in.a);
	in.addition();
	System.out.println(in.c);
	in.sub(100, 50);
	
	System.out.println(B.mul());

	}

}

====================
extends and implements

class A{

1000 methods 
}
class B extends A
{

10 methods =1010 methods

}

Types 

single level
multi level 
hirarchical 
hybrid
multiple in :is not supported in java at class level but it will support at interface


interface A{              interface B{

void add():               void add():
							

}                      }

class C implements A,B{
main()
{
C c=new C();
c.add
}
}


Concrete method:Method with Body/implementation

abstract method:Method without body/implementation

public void addition();

class :a group of only concrete methods 


abstract class:concrete method + abstract method


interface:only abstract method



Abstraction:
Hiding the internals by showcasing their functionality

abstract class 0-100
interface 100
interface A{

public void add();

}
interface B extends A{

public void sub();
}

Polymorphism
============================
ManyForms

1)CompileTime/MethodOverLoading:Method name is same but signature is different
                                                        no of args,type of args,order of args
													Type promotion in java

2)RunTime/MethodOverriding:Method name is same but implementation is different 

Constructor
=======================
a special member function which gets called when you want to allocate instanteneous memory for objects

Classname obj=new Classname(); 
default constructor ,no args const
parameterized constructor

final : final before variable,class,method

this :this is used to represent current class properties

super :this is used to represent parent class properties

thissuperex
=========================
package org.com.oops;
class Parent{
	int a=123;
	Parent(){
		System.out.println("Parent class Default constrictor");
		
	}
	public void m1() {
		System.out.println("am from parent class m1 method");
	}
}

public class ThisSuperExa extends Parent {
	int a=234;
 ThisSuperExa() {
		System.out.println(this.a);
		System.out.println(super.a);
		this.m1();
		super.m1();
	}
 ThisSuperExa(String name){
	 
	 this();
	 System.out.println("param const" + name);
 }
 public void m1() {
	 System.out.println("am from child class  "+super.a+a);
}

	public static void main(String[] args) {
		ThisSuperExa obj=new ThisSuperExa();
		System.out.println(obj.a);
		ThisSuperExa obj2=new ThisSuperExa("Phani");
		

	}

}

AccessModifiers

public 

private

protected 

default


Encapsulation:

Binding up off data(variables) and methods together

getters and setters


String
============is non primitive datatype
collection of charcters

String animal="dog";//literal 
String animal=new String("dog");
immutable

string buffer  synchronised and string builder are mutable asynchronised
public void synchronized add(){

}//at a time only one thread ,thread safety,performance poor

public void add(){

//performance will better,no thread safety
}


Wrapper Classes:the process of converting primitive to object and object to primitive,
autoboxing :primitive to object//primitive to wrapper byte to Byte

unboxing:object to primitive
Integer
Float
Character
Boolean
Short
Byte
Long
Double

ExceptionHandling
==================
Throwable
Exception RunTimeException
class A{
1
2








1000




}//abnormal Termination,Systemdefined error messages

Exception Handling

normal and userfriendly error messages

Array:
collection of fixed type
n=5
0-(n-1)

int a[]=new a[5];
int a[0]=10;
int a[1]=20;
int a[2]=30;

int a[]={10,20,30}
sop(a[1]);


int a[][]={{10,20},{30,40}}

try catch,multiple try catch,try with multiple catch,mutliple try with catch
throw,throws

for creating user defined exceptions
1)make your class as child to the Exception
2)create param constructor in your class



Collection
FRamework=readymade

Arrays are fixed in size
Arrays are allow only homogeneous
Arrays not have any predefined methods


variable in the size
both homogenneous/heterogeneous
utility methods


compareTo=java.Lang.Comparable class

compare=java.util.Comparator interface
ex

public class SetEx {

	public static void main(String[] args) {
		ReverseOrder r = new ReverseOrder();
		TreeSet<String> h = new TreeSet<String>(r);

		h.add("Hello");// syso(hello.compareTo(Raghav))
		h.add("Raghav");
		h.add("Phani");
		h.add("Kumar");
		h.add("Abhi");
		System.out.println(-"Hello".compareTo("Raghav"));
		System.out.println(h);
		Iterator itr = h.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

class ReverseOrder implements Comparator<String> {
	@Override
	public int compare(String a, String b) {
		return -a.compareTo(b);

	}

}

MultiTasking
====================

ProcessBased MultiTasking
All the tasks are executed simultaneously where each task is independent of each other
ex:Laptop




Thread Based MultiTasking,MultiTreading
ex:All the Threads are executed simultaneously where each task is related that process
Notepad++


class A{
1
2=one process
3
4


1000
}


1)Runnable Interface==Fi =SAM
run()

2)Thread class


yeild()


T1=6

T2=5

T3=4

InterThread Communication,synchronized,wait()


class A{
2 methods 



}

File io

input(write)  output(read)
File
File Writer
Buffered Writer
Print Writer
File Reader,Buffered Reader

Serialization and deserializarion

Serialization is the process of converting java code into byte code
